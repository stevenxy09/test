package com.smart.taxi.util;

import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import static java.util.regex.Pattern.compile;

/**
 * @Description 打包
 * @Author stevenxy
 * @Create 2019-08-08
 */
@Slf4j
public class ZipUtil {
    /**
     * @param args 主方法
     */
    public static void main(String[] args) {
        // 第一个参数是需要压缩的源路径；第二个参数是压缩文件的目的路径，这边需要将压缩的文件名字加上去
        List<File> files = new ArrayList<>();
        String url1 = "http://125.76.228.181:8099/Cgo8Attach/TopAttachFile/20190715/17382534942/6403/5397d6c0-2a2d-4591-bd57-86e9b1b445d7/00_64_6403_01_5397d6c02a2d4591bd5786e9b1b445d7.jpg";
        try {
            URL url = new URL(url1);
            try {
                url.openConnection().getInputStream();
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        File file1 = new File(url1);
        files.add(file1);
        String zipFilePath = "C:\\";
        String fileName = "test";
        File zipFile = ZipUtil.fileToZip(files, zipFilePath, fileName);
        FileSystemResource fileSource = new FileSystemResource(zipFile);
        try {
            Object o = ZipUtil.downloadFile(fileSource.getInputStream(), fileSource.getFilename());
            // zipFile.delete();// 删除暂时存储的zip压缩包
        } catch (IOException e) {
            e.printStackTrace();

        }

    }

    /**
     * 压缩文件
     * 
     * @param files
     * @param zipFilePath
     * @param fileName
     * @return
     */
    public static File fileToZip(List<File> files, String zipFilePath, String fileName) {
        File zipFile = new File(zipFilePath + "/" + fileName + ".zip");
        new File(zipFilePath).mkdirs();
        FileInputStream fis;
        BufferedInputStream bis = null;
        FileOutputStream fos;
        ZipOutputStream zos = null;
        try {
            fos = new FileOutputStream(zipFile);
            zos = new ZipOutputStream(new BufferedOutputStream(fos));
            byte[] bufs = new byte[1024 * 10];
            for (File file : files) {
                // 创建ZIP实体，并添加进压缩包
                String name = file.getName();
                // 压缩
                ZipEntry zipEntry = new ZipEntry(name);
                // 将每个压缩文件保存到zip文件中
                zos.putNextEntry(zipEntry);
                // 读取待压缩的文件并写进压缩包里
                fis = new FileInputStream(file);
                bis = new BufferedInputStream(fis, 1024 * 10);
                int read;
                while ((read = bis.read(bufs, 0, 1024 * 10)) != -1) {
                    zos.write(bufs, 0, read);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } finally {
            // 关闭流
            try {
                if (null != bis) {
                    bis.close();
                }
                if (null != zos) {
                    zos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
                throw new RuntimeException(e);
            }
        }
        return zipFile;
    }

    /**
     * 下载文件到浏览器默认路径
     * 
     * @param in
     * @param fileName
     * @return
     */
    public static ResponseEntity<InputStreamResource> downloadFile(InputStream in, String fileName) {
        try {
            byte[] testBytes = new byte[in.available()];
            HttpHeaders headers = new HttpHeaders();
            headers.add("Cache-Control", "no-cache, no-store, must-revalidate");
            headers.add("Content-Disposition", String.format("attachment; filename=\"%s\"", MarkUtil.convertFileName(fileName)));
            headers.add("Pragma", "no-cache");
            headers.add("Expires", "0");
            return ResponseEntity.ok().headers(headers).contentLength(testBytes.length).contentType(MediaType.parseMediaType("application/octet-stream")).body(new InputStreamResource(in));
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static class MarkUtil {
        /**
         * chinese code convert
         * 
         * @param fileName
         * @return
         */
        public static String convertFileName(String fileName) {
            if (MarkUtil.isContainChinese(fileName)) {
                try {
                    fileName = URLEncoder.encode(fileName, "UTF-8");
                } catch (UnsupportedEncodingException e) {
                    e.printStackTrace();
                }
            }
            return fileName;
        }

        public static boolean isContainChinese(String str) {
            Pattern p = compile("[\u4e00-\u9fa5]");
            Matcher m = p.matcher(str);
            return m.find();
        }
    }

    public void download(HttpServletRequest request, HttpServletResponse response) {

        try {
            // 文件的名称
            String downloadFilename = "test.zip";
            // 转换中文否则可能会产生乱码
            downloadFilename = URLEncoder.encode(downloadFilename, "UTF-8");
            // 指明response的返回对象是文件流
            response.setContentType("application/octet-stream");
            // 设置在下载框默认显示的文件名
            response.setHeader("Content-Disposition", "attachment;filename=" + downloadFilename);
            ZipOutputStream zos = new ZipOutputStream(response.getOutputStream());
            String[] files = new String[] { "http://125.76.228.181:8099/Cgo8Attach/TopAttachFile/20190715/17382534942/6403/5397d6c0-2a2d-4591-bd57-86e9b1b445d7/00_64_6403_02_5397d6c02a2d4591bd5786e9b1b445d7.jpg",
                    "http://125.76.228.181:8099/Cgo8Attach/TopAttachFile/20190715/17382534942/6403/5397d6c0-2a2d-4591-bd57-86e9b1b445d7/00_64_6403_02_5397d6c02a2d4591bd5786e9b1b445d7.jpg" };
            for (int i = 0; i < files.length; i++) {
                URL url = new URL(files[i]);
                zos.putNextEntry(new ZipEntry(i + ".jpg"));
                // FileInputStream fis = new FileInputStream(new File(files[i]));
                InputStream fis = url.openConnection().getInputStream();
                byte[] buffer = new byte[1024];
                int r;
                while ((r = fis.read(buffer)) != -1) {
                    zos.write(buffer, 0, r);
                }
                fis.close();
            }
            zos.flush();
            zos.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
